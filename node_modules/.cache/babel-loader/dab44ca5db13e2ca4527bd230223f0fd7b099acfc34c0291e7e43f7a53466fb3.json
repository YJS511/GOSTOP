{"ast":null,"code":"var _jsxFileName = \"/Users/yongjisun/Desktop/gostop/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedTransports, setSelectedTransports] = useState([]);\n  const [time, setTime] = useState(20);\n  const [address, setAddress] = useState('');\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const outerCircleRef = useRef(null);\n  const innerCircleRef = useRef(null);\n  const ringPolygonRef = useRef(null);\n  const routeLineRef = useRef(null);\n  const toggleTransport = type => {\n    setSelectedTransports(prev => {\n      // Prevent selecting bus or subway if car is already selected\n      if ((type === 'bus' || type === 'subway') && prev.includes('car') && !prev.includes(type)) {\n        return prev;\n      }\n      // Prevent selecting car if bus or subway is already selected\n      if (type === 'car' && (prev.includes('bus') || prev.includes('subway')) && !prev.includes('car')) {\n        return prev;\n      }\n      // 2. If selecting 'bus' or 'subway', ensure 'walking' is also selected\n      if (type === 'bus' || type === 'subway') {\n        if (prev.includes(type)) {\n          // Deselecting bus/subway\n          return prev.filter(t => t !== type);\n        } else {\n          // Selecting bus/subway\n          let newTransports = [...prev, type];\n          if (!prev.includes('walking')) {\n            newTransports.push('walking');\n          }\n          // Remove duplicates\n          return Array.from(new Set(newTransports));\n        }\n      }\n      // 3. If deselecting walking, also remove bus and subway if present\n      if (type === 'walking') {\n        if (prev.includes('walking')) {\n          // Deselect walking, also remove bus and subway\n          return prev.filter(t => t !== 'walking' && t !== 'bus' && t !== 'subway');\n        } else {\n          // Selecting walking\n          return [...prev, 'walking'];\n        }\n      }\n      // Default toggle for other types (including 'car')\n      return prev.includes(type) ? prev.filter(t => t !== type) : [...prev, type];\n    });\n  };\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        if (latitude !== undefined && longitude !== undefined) {\n          const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n          const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${latitude}&lon=${longitude}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n          fetch(url).then(response => response.json()).then(data => {\n            if (data && data.addressInfo) {\n              const {\n                legalDong,\n                roadName,\n                buildingName\n              } = data.addressInfo;\n              const simplifiedAddress = `${legalDong} ${roadName}${buildingName ? ' ' + buildingName : ''}`;\n              setAddress(simplifiedAddress);\n            } else {\n              setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n            }\n            if (window.Tmapv2 && mapInstanceRef.current) {\n              // Remove previous marker if exists\n              if (markerRef.current) {\n                markerRef.current.setMap(null);\n              }\n              markerRef.current = new window.Tmapv2.Marker({\n                position: new window.Tmapv2.LatLng(latitude, longitude),\n                map: mapInstanceRef.current\n              });\n              mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(latitude, longitude));\n            }\n          }).catch(error => {\n            console.error(error);\n            alert('주소 변환에 실패했습니다.');\n            setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n          });\n        }\n      }, () => {\n        alert('위치를 가져오는 데 실패했습니다.');\n      });\n    } else {\n      alert('이 브라우저는 위치를 지원하지 않습니다.');\n    }\n  }, []);\n  useEffect(() => {\n    getCurrentLocation();\n    if (window.Tmapv2 && mapRef.current) {\n      mapInstanceRef.current = new window.Tmapv2.Map(mapRef.current, {\n        center: new window.Tmapv2.LatLng(37.49241689559544, 127.03171389453507),\n        width: \"100%\",\n        height: \"100%\",\n        zoom: 15,\n        // further zoomed in\n        zoomControl: false,\n        scrollwheel: true\n      });\n    }\n  }, [getCurrentLocation]);\n  useEffect(() => {\n    if (!markerRef.current || !mapInstanceRef.current) {\n      return;\n    }\n    // Remove previous circles and polygon if exist\n    if (outerCircleRef.current) {\n      outerCircleRef.current.setMap(null);\n      outerCircleRef.current = null;\n    }\n    if (innerCircleRef.current) {\n      innerCircleRef.current.setMap(null);\n      innerCircleRef.current = null;\n    }\n    if (ringPolygonRef.current) {\n      ringPolygonRef.current.setMap(null);\n      ringPolygonRef.current = null;\n    }\n    if (selectedTransports.length === 0) {\n      return;\n    }\n    const position = markerRef.current.getPosition();\n    const latitude = position.lat();\n    const longitude = position.lng();\n\n    // Average speeds in meters per hour\n    const speedTable = {\n      car: 60000,\n      bus: 40000,\n      subway: 50000,\n      walking: 5000\n    };\n    // Reduction factors for each transport mode\n    const reductionTable = {\n      car: 0.7,\n      // 30% reduction\n      bus: 0.6,\n      // 40% reduction\n      subway: 0.5,\n      // 50% reduction\n      walking: 0.4 // 60% reduction\n    };\n    const transports = selectedTransports;\n    const adjustedSpeeds = transports.map(t => {\n      return speedTable[t] || 0;\n    });\n    const totalSpeed = adjustedSpeeds.reduce((acc, s) => acc + s, 0);\n    const avgSpeedMph = totalSpeed / transports.length;\n    const avgSpeedMpm = avgSpeedMph / 60; // meters per minute\n    let outerRadius = avgSpeedMpm * time; // meters\n\n    // Apply reduction factors based on selected transport modes\n    // Use the most restrictive (minimum) reduction factor among selected transports\n    if (transports.length > 0) {\n      const reductions = transports.map(t => reductionTable[t] || 1);\n      const minReduction = Math.min(...reductions);\n      outerRadius = outerRadius * minReduction;\n    }\n    const innerRadius = outerRadius * 0.72;\n\n    // Draw outer and inner circles with no fill (transparent)\n    outerCircleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: outerRadius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0,\n      map: mapInstanceRef.current\n    });\n    innerCircleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: innerRadius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0,\n      map: mapInstanceRef.current\n    });\n\n    // Create polygon ring (donut shape) between outerRadius and innerRadius\n    // Use many small points for smooth ring\n    const pointsCount = 60; // number of points for smooth circle\n\n    // Helper function to compute lat/lng offset by meters\n    const metersToLatLng = (lat, lng, dx, dy) => {\n      // dx: east-west offset in meters\n      // dy: north-south offset in meters\n      const latConv = 111320;\n      const lngConv = 111320 * Math.cos(lat * Math.PI / 180);\n      const newLat = lat + dy / latConv;\n      const newLng = lng + dx / lngConv;\n      return new window.Tmapv2.LatLng(newLat, newLng);\n    };\n    const outerPoints = [];\n    const innerPoints = [];\n    for (let i = 0; i <= pointsCount; i++) {\n      const angle = 2 * Math.PI * i / pointsCount;\n      // Outer circle point (x,y)\n      const ox = outerRadius * Math.cos(angle);\n      const oy = outerRadius * Math.sin(angle);\n      outerPoints.push(metersToLatLng(latitude, longitude, ox, oy));\n    }\n    for (let i = pointsCount; i >= 0; i--) {\n      const angle = 2 * Math.PI * i / pointsCount;\n      // Inner circle point (x,y)\n      const ix = innerRadius * Math.cos(angle);\n      const iy = innerRadius * Math.sin(angle);\n      innerPoints.push(metersToLatLng(latitude, longitude, ix, iy));\n    }\n    const ringPath = outerPoints.concat(innerPoints);\n    ringPolygonRef.current = new window.Tmapv2.Polygon({\n      paths: ringPath,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0.2,\n      map: mapInstanceRef.current\n    });\n  }, [selectedTransports, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-inner\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"header-logo\",\n            children: \"GOSTOP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"app-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"location-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-input-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\uC704\\uCE58\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n              className: \"location-input\",\n              value: address,\n              onChange: e => setAddress(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"location-btn\",\n              onClick: getCurrentLocation,\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-location-crosshairs location-btn-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"transport-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uC774\\uB3D9 \\uC218\\uB2E8 \\uC120\\uD0DD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transport-grid\",\n            children: [{\n              icon: 'car',\n              label: '자동차'\n            }, {\n              icon: 'bus',\n              label: '버스'\n            }, {\n              icon: 'subway',\n              label: '지하철'\n            }, {\n              icon: 'walking',\n              label: '도보'\n            }].map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `transport-btn ${selectedTransports.includes(item.icon) ? 'transport-btn-selected' : 'transport-btn-default'}`,\n              onClick: () => {\n                toggleTransport(item.icon);\n                // If \"walking\" is selected (either directly or as a result of bus/subway selection), trigger pedestrian route API logic if needed\n                // (This can be expanded if you want to preview the pedestrian route immediately upon selection)\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fas fa-${item.icon} transport-btn-icon`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"transport-btn-label\",\n                children: item.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 23\n              }, this)]\n            }, item.icon, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uC5EC\\uD589 \\uC2DC\\uAC04 \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-range-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"20\",\n              max: \"720\",\n              value: time,\n              onChange: e => setTime(parseInt(e.target.value)),\n              className: \"time-range-slider\",\n              step: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-range-labels\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-range-label\",\n                children: \"20\\uBD84\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-range-label\",\n                children: [Math.floor(time / 60), \"\\uC2DC\\uAC04 \", time % 60, \"\\uBD84\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-range-label\",\n                children: \"12\\uC2DC\\uAC04\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: mapRef,\n            style: {\n              width: '100%',\n              height: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-btn\",\n          onClick: async () => {\n            if (!markerRef.current || !mapInstanceRef.current || !outerCircleRef.current || !innerCircleRef.current) {\n              alert('지도를 초기화하거나 이동수단/시간을 선택해주세요.');\n              return;\n            }\n            // Get center and radii\n            const center = outerCircleRef.current.getCenter();\n            const outerRadius = outerCircleRef.current.getRadius(); // in meters\n            const innerRadius = innerCircleRef.current.getRadius();\n            const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n            // Helper for random point generation and building verification\n            async function getRandomBuildingPoint(maxTries = 10) {\n              for (let attempt = 0; attempt < maxTries; attempt++) {\n                // Generate random angle and distance between innerRadius and outerRadius\n                const theta = Math.random() * 2 * Math.PI;\n                const r = innerRadius + (outerRadius - innerRadius) * Math.sqrt(Math.random());\n                // Convert meters to degrees\n                const latConv = 111320;\n                const lngConv = 111320 * Math.cos(center.lat() * Math.PI / 180);\n                const dLat = r * Math.cos(theta) / latConv;\n                const dLng = r * Math.sin(theta) / lngConv;\n                const lat = center.lat() + dLat;\n                const lng = center.lng() + dLng;\n                // Call Tmap reverse geocoding API to check for building\n                const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${lat}&lon=${lng}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n                try {\n                  const resp = await fetch(url);\n                  if (resp.ok) {\n                    const data = await resp.json();\n                    // buildingName present and non-empty means it's a building\n                    if (data && data.addressInfo && data.addressInfo.buildingName && data.addressInfo.buildingName.trim() !== '') {\n                      return {\n                        lat,\n                        lng,\n                        addressInfo: data.addressInfo\n                      };\n                    }\n                  }\n                } catch (e) {\n                  // ignore and retry\n                }\n              }\n              // fallback: just use a random point (could not find a building)\n              // (could return null to abort, but fallback to random point for now)\n              // Generate one last random point\n              const theta = Math.random() * 2 * Math.PI;\n              const r = innerRadius + (outerRadius - innerRadius) * Math.sqrt(Math.random());\n              const latConv = 111320;\n              const lngConv = 111320 * Math.cos(center.lat() * Math.PI / 180);\n              const dLat = r * Math.cos(theta) / latConv;\n              const dLng = r * Math.sin(theta) / lngConv;\n              const lat = center.lat() + dLat;\n              const lng = center.lng() + dLng;\n              return {\n                lat,\n                lng,\n                addressInfo: null\n              };\n            }\n\n            // Remove previous random markers if exist\n            if (window._randomTravelMarkerA) {\n              window._randomTravelMarkerA.setMap(null);\n            }\n            if (window._randomTravelMarkerB) {\n              window._randomTravelMarkerB.setMap(null);\n            }\n            // Marker A: start point\n            window._randomTravelMarkerA = new window.Tmapv2.Marker({\n              position: center,\n              map: mapInstanceRef.current,\n              label: 'A'\n            });\n\n            // Generate and verify random point (must be a building)\n            const randomPoint = await getRandomBuildingPoint(10);\n            let lat = randomPoint.lat;\n            let lng = randomPoint.lng;\n            window._randomTravelMarkerB = new window.Tmapv2.Marker({\n              position: new window.Tmapv2.LatLng(lat, lng),\n              map: mapInstanceRef.current,\n              label: ''\n            });\n\n            // Center map to random point\n            mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(lat, lng));\n\n            // Determine route type based on selected transport mode\n            let routeType = 'walking'; // default fallback\n            if (selectedTransports.includes('walking')) {\n              routeType = 'walking';\n            } else if (selectedTransports.includes('car')) {\n              routeType = 'car';\n            } else if (selectedTransports.includes('bus')) {\n              routeType = 'bus';\n            } else if (selectedTransports.includes('subway')) {\n              routeType = 'subway';\n            }\n\n            // Remove previous route line if exists\n            if (routeLineRef.current) {\n              routeLineRef.current.setMap(null);\n              routeLineRef.current = null;\n            }\n            const startX = center.lng();\n            const startY = center.lat();\n            let endX = lng;\n            let endY = lat;\n\n            // For walking, snap to road (도로 위) using reverse geocoding API for better reliability\n            let snappedLat = lat;\n            let snappedLng = lng;\n            try {\n              if (routeType === 'walking' || routeType === 'bus' || routeType === 'subway') {\n                const snapUrl = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${lat}&lon=${lng}&coordType=WGS84GEO&addressType=R&appKey=${appKey}`;\n                const snapResp = await fetch(snapUrl);\n                if (snapResp.ok) {\n                  const snapData = await snapResp.json();\n                  if (snapData && snapData.coordinateInfo && snapData.coordinateInfo.lat && snapData.coordinateInfo.lon) {\n                    snappedLat = parseFloat(snapData.coordinateInfo.lat);\n                    snappedLng = parseFloat(snapData.coordinateInfo.lon);\n                    window._randomTravelMarkerB.setPosition(new window.Tmapv2.LatLng(snappedLat, snappedLng));\n                    mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(snappedLat, snappedLng));\n                    endX = snappedLng;\n                    endY = snappedLat;\n                  } else {\n                    endX = lng;\n                    endY = lat;\n                  }\n                } else {\n                  endX = lng;\n                  endY = lat;\n                }\n              }\n            } catch (err) {\n              endX = lng;\n              endY = lat;\n            }\n\n            // Coordinate validation\n            const coordsValid = [startX, startY, endX, endY].every(v => typeof v === 'number' && !isNaN(v) && isFinite(v));\n            if (!coordsValid) {\n              alert('좌표 값이 올바르지 않습니다.');\n              return;\n            }\n\n            // Call pedestrian-specific API for walking, otherwise use general route API\n            if (routeType === 'walking') {\n              // Tmap Pedestrian Route API (POST)\n              const url = `https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&appKey=${appKey}`;\n              const body = {\n                startX: startX.toString(),\n                startY: startY.toString(),\n                endX: endX.toString(),\n                endY: endY.toString(),\n                reqCoordType: \"WGS84GEO\",\n                resCoordType: \"WGS84GEO\"\n              };\n              fetch(url, {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(body)\n              }).then(response => {\n                if (!response.ok) {\n                  throw new Error('API 요청에 실패했습니다.');\n                }\n                return response.json();\n              }).then(data => {\n                if (data.features && data.features.length > 0) {\n                  let drawInfoArr = [];\n                  data.features.forEach(function (feature) {\n                    if (feature.geometry && feature.geometry.type === \"LineString\") {\n                      feature.geometry.coordinates.forEach(function (coord) {\n                        drawInfoArr.push(new window.Tmapv2.LatLng(coord[1], coord[0]));\n                      });\n                    }\n                  });\n                  if (drawInfoArr.length > 0) {\n                    routeLineRef.current = new window.Tmapv2.Polyline({\n                      path: drawInfoArr,\n                      strokeColor: '#FF0000',\n                      strokeWeight: 5,\n                      map: mapInstanceRef.current\n                    });\n                  }\n                } else {\n                  alert('경로를 찾을 수 없습니다.');\n                }\n              }).catch(error => {\n                console.error('경로 요청 중 오류 발생:', error);\n                alert('경로 요청에 실패했습니다.');\n              });\n            } else {\n              // Use general route API for car, bus, subway\n              let searchOption = '0';\n              if (routeType === 'bus' || routeType === 'subway') {\n                searchOption = '2';\n              }\n              const resCoordType = 'WGS84GEO';\n              const url = `https://apis.openapi.sk.com/tmap/routes?version=1&startX=${startX}&startY=${startY}&endX=${endX}&endY=${endY}&reqCoordType=WGS84GEO&resCoordType=${resCoordType}&searchOption=${searchOption}&appKey=${appKey}`;\n              fetch(url).then(response => {\n                if (!response.ok) {\n                  throw new Error('API 요청에 실패했습니다.');\n                }\n                return response.json();\n              }).then(data => {\n                if (data.features && data.features.length > 0) {\n                  let coords = [];\n                  data.features.forEach(feature => {\n                    if (feature.geometry && feature.geometry.type === 'LineString') {\n                      feature.geometry.coordinates.forEach(coord => {\n                        coords.push(new window.Tmapv2.LatLng(coord[1], coord[0]));\n                      });\n                    }\n                  });\n                  if (coords.length > 0) {\n                    routeLineRef.current = new window.Tmapv2.Polyline({\n                      path: coords,\n                      strokeColor: '#FF0000',\n                      strokeWeight: 5,\n                      map: mapInstanceRef.current\n                    });\n                  }\n                } else {\n                  alert('경로를 찾을 수 없습니다.');\n                }\n              }).catch(error => {\n                console.error('경로 요청 중 오류 발생:', error);\n                alert('경로 요청에 실패했습니다.');\n              });\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-random start-btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this), \"\\uB79C\\uB364 \\uC5EC\\uD589 \\uC2DC\\uC791\\uD558\\uAE30\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"AujkHzpy3wEfE2dEPw3B8t9pf60=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","App","_s","selectedTransports","setSelectedTransports","time","setTime","address","setAddress","mapRef","markerRef","mapInstanceRef","outerCircleRef","innerCircleRef","ringPolygonRef","routeLineRef","toggleTransport","type","prev","includes","filter","t","newTransports","push","Array","from","Set","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","undefined","appKey","url","fetch","then","response","json","data","addressInfo","legalDong","roadName","buildingName","simplifiedAddress","toFixed","window","Tmapv2","current","setMap","Marker","LatLng","map","setCenter","catch","error","console","alert","Map","center","width","height","zoom","zoomControl","scrollwheel","length","getPosition","lat","lng","speedTable","car","bus","subway","walking","reductionTable","transports","adjustedSpeeds","totalSpeed","reduce","acc","s","avgSpeedMph","avgSpeedMpm","outerRadius","reductions","minReduction","Math","min","innerRadius","Circle","radius","strokeWeight","strokeColor","strokeOpacity","fillColor","fillOpacity","pointsCount","metersToLatLng","dx","dy","latConv","lngConv","cos","PI","newLat","newLng","outerPoints","innerPoints","i","angle","ox","oy","sin","ix","iy","ringPath","concat","Polygon","paths","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","icon","label","item","max","parseInt","step","floor","ref","style","getCenter","getRadius","getRandomBuildingPoint","maxTries","attempt","theta","random","r","sqrt","dLat","dLng","resp","ok","trim","_randomTravelMarkerA","_randomTravelMarkerB","randomPoint","routeType","startX","startY","endX","endY","snappedLat","snappedLng","snapUrl","snapResp","snapData","coordinateInfo","lon","parseFloat","setPosition","err","coordsValid","every","v","isNaN","isFinite","body","toString","reqCoordType","resCoordType","method","headers","JSON","stringify","Error","features","drawInfoArr","forEach","feature","geometry","coordinates","coord","Polyline","path","searchOption","_c","$RefreshReg$"],"sources":["/Users/yongjisun/Desktop/gostop/src/App.js"],"sourcesContent":["import './App.css'\nimport { useState, useEffect, useRef, useCallback } from 'react'\n\nfunction App() {\n  const [selectedTransports, setSelectedTransports] = useState([])\n  const [time, setTime] = useState(20)\n  const [address, setAddress] = useState('')\n\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const outerCircleRef = useRef(null);\n  const innerCircleRef = useRef(null);\n  const ringPolygonRef = useRef(null);\n  const routeLineRef = useRef(null);\n\n  const toggleTransport = (type) => {\n    setSelectedTransports((prev) => {\n      // Prevent selecting bus or subway if car is already selected\n      if ((type === 'bus' || type === 'subway') && prev.includes('car') && !prev.includes(type)) {\n        return prev;\n      }\n      // Prevent selecting car if bus or subway is already selected\n      if (type === 'car' && (prev.includes('bus') || prev.includes('subway')) && !prev.includes('car')) {\n        return prev;\n      }\n      // 2. If selecting 'bus' or 'subway', ensure 'walking' is also selected\n      if ((type === 'bus' || type === 'subway')) {\n        if (prev.includes(type)) {\n          // Deselecting bus/subway\n          return prev.filter((t) => t !== type);\n        } else {\n          // Selecting bus/subway\n          let newTransports = [...prev, type];\n          if (!prev.includes('walking')) {\n            newTransports.push('walking');\n          }\n          // Remove duplicates\n          return Array.from(new Set(newTransports));\n        }\n      }\n      // 3. If deselecting walking, also remove bus and subway if present\n      if (type === 'walking') {\n        if (prev.includes('walking')) {\n          // Deselect walking, also remove bus and subway\n          return prev.filter((t) => t !== 'walking' && t !== 'bus' && t !== 'subway');\n        } else {\n          // Selecting walking\n          return [...prev, 'walking'];\n        }\n      }\n      // Default toggle for other types (including 'car')\n      return prev.includes(type) ? prev.filter((t) => t !== type) : [...prev, type];\n    });\n  }\n\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n\n          if (latitude !== undefined && longitude !== undefined) {\n            const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n            const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${latitude}&lon=${longitude}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n\n            fetch(url)\n              .then(response => response.json())\n              .then(data => {\n                if (data && data.addressInfo) {\n                  const { legalDong, roadName, buildingName } = data.addressInfo;\n                  const simplifiedAddress = `${legalDong} ${roadName}${buildingName ? ' ' + buildingName : ''}`;\n                  setAddress(simplifiedAddress);\n                } else {\n                  setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n                }\n                if (window.Tmapv2 && mapInstanceRef.current) {\n                  // Remove previous marker if exists\n                  if (markerRef.current) {\n                    markerRef.current.setMap(null);\n                  }\n                  markerRef.current = new window.Tmapv2.Marker({\n                    position: new window.Tmapv2.LatLng(latitude, longitude),\n                    map: mapInstanceRef.current,\n                  });\n                  mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(latitude, longitude));\n                }\n              })\n              .catch((error) => {\n                console.error(error);\n                alert('주소 변환에 실패했습니다.');\n                setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n              });\n          }\n        },\n        () => {\n          alert('위치를 가져오는 데 실패했습니다.');\n        }\n      );\n    } else {\n      alert('이 브라우저는 위치를 지원하지 않습니다.');\n    }\n  }, [])\n\n  useEffect(() => {\n    getCurrentLocation()\n    if (window.Tmapv2 && mapRef.current) {\n      mapInstanceRef.current = new window.Tmapv2.Map(mapRef.current, {\n        center: new window.Tmapv2.LatLng(37.49241689559544, 127.03171389453507),\n        width: \"100%\",\n        height: \"100%\",\n        zoom: 15, // further zoomed in\n        zoomControl: false,\n        scrollwheel: true,\n      });\n    }\n  }, [getCurrentLocation])\n\n  useEffect(() => {\n    if (!markerRef.current || !mapInstanceRef.current) {\n      return;\n    }\n    // Remove previous circles and polygon if exist\n    if (outerCircleRef.current) {\n      outerCircleRef.current.setMap(null);\n      outerCircleRef.current = null;\n    }\n    if (innerCircleRef.current) {\n      innerCircleRef.current.setMap(null);\n      innerCircleRef.current = null;\n    }\n    if (ringPolygonRef.current) {\n      ringPolygonRef.current.setMap(null);\n      ringPolygonRef.current = null;\n    }\n    if (selectedTransports.length === 0) {\n      return;\n    }\n    const position = markerRef.current.getPosition();\n    const latitude = position.lat();\n    const longitude = position.lng();\n\n    // Average speeds in meters per hour\n    const speedTable = {\n      car: 60000,\n      bus: 40000,\n      subway: 50000,\n      walking: 5000,\n    };\n    // Reduction factors for each transport mode\n    const reductionTable = {\n      car: 0.7,      // 30% reduction\n      bus: 0.6,      // 40% reduction\n      subway: 0.5,   // 50% reduction\n      walking: 0.4,  // 60% reduction\n    };\n    const transports = selectedTransports;\n    const adjustedSpeeds = transports.map((t) => {\n      return speedTable[t] || 0;\n    });\n    const totalSpeed = adjustedSpeeds.reduce((acc, s) => acc + s, 0);\n    const avgSpeedMph = totalSpeed / transports.length;\n    const avgSpeedMpm = avgSpeedMph / 60; // meters per minute\n    let outerRadius = avgSpeedMpm * time; // meters\n\n    // Apply reduction factors based on selected transport modes\n    // Use the most restrictive (minimum) reduction factor among selected transports\n    if (transports.length > 0) {\n      const reductions = transports.map((t) => reductionTable[t] || 1);\n      const minReduction = Math.min(...reductions);\n      outerRadius = outerRadius * minReduction;\n    }\n\n    const innerRadius = outerRadius * 0.72;\n\n    // Draw outer and inner circles with no fill (transparent)\n    outerCircleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: outerRadius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0,\n      map: mapInstanceRef.current,\n    });\n\n    innerCircleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: innerRadius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0,\n      map: mapInstanceRef.current,\n    });\n\n    // Create polygon ring (donut shape) between outerRadius and innerRadius\n    // Use many small points for smooth ring\n    const pointsCount = 60; // number of points for smooth circle\n\n    // Helper function to compute lat/lng offset by meters\n    const metersToLatLng = (lat, lng, dx, dy) => {\n      // dx: east-west offset in meters\n      // dy: north-south offset in meters\n      const latConv = 111320;\n      const lngConv = 111320 * Math.cos((lat * Math.PI) / 180);\n      const newLat = lat + dy / latConv;\n      const newLng = lng + dx / lngConv;\n      return new window.Tmapv2.LatLng(newLat, newLng);\n    };\n\n    const outerPoints = [];\n    const innerPoints = [];\n    for (let i = 0; i <= pointsCount; i++) {\n      const angle = (2 * Math.PI * i) / pointsCount;\n      // Outer circle point (x,y)\n      const ox = outerRadius * Math.cos(angle);\n      const oy = outerRadius * Math.sin(angle);\n      outerPoints.push(metersToLatLng(latitude, longitude, ox, oy));\n    }\n    for (let i = pointsCount; i >= 0; i--) {\n      const angle = (2 * Math.PI * i) / pointsCount;\n      // Inner circle point (x,y)\n      const ix = innerRadius * Math.cos(angle);\n      const iy = innerRadius * Math.sin(angle);\n      innerPoints.push(metersToLatLng(latitude, longitude, ix, iy));\n    }\n\n    const ringPath = outerPoints.concat(innerPoints);\n\n    ringPolygonRef.current = new window.Tmapv2.Polygon({\n      paths: ringPath,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0.2,\n      map: mapInstanceRef.current,\n    });\n\n  }, [selectedTransports, time])\n\n  return (\n      <div className=\"app-wrapper\">\n        <div className=\"app-container\">\n          <header className=\"app-header\">\n            <div className=\"header-inner\">\n              <h1 className=\"header-logo\">GOSTOP</h1>\n            </div>\n          </header>\n\n          <main className=\"app-main\">\n            <section className=\"location-section\">\n              <h3 className=\"section-title\">현재 위치</h3>\n              <div className=\"location-input-wrapper\">\n                <input\n                    type=\"text\"\n                    placeholder=\"위치를 입력하세요\"\n                    className=\"location-input\"\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                />\n                <button className=\"location-btn\" onClick={getCurrentLocation}>\n                  <i className=\"fas fa-location-crosshairs location-btn-icon\"></i>\n                </button>\n              </div>\n            </section>\n\n            <section className=\"transport-section\">\n              <h3 className=\"section-title\">이동 수단 선택</h3>\n              <div className=\"transport-grid\">\n                {[\n                  { icon: 'car', label: '자동차' },\n                  { icon: 'bus', label: '버스' },\n                  { icon: 'subway', label: '지하철' },\n                  { icon: 'walking', label: '도보' },\n                ].map((item) => (\n                    <button\n                        key={item.icon}\n                        className={`transport-btn ${\n                            selectedTransports.includes(item.icon)\n                                ? 'transport-btn-selected'\n                                : 'transport-btn-default'\n                        }`}\n                        onClick={() => {\n                          toggleTransport(item.icon);\n                          // If \"walking\" is selected (either directly or as a result of bus/subway selection), trigger pedestrian route API logic if needed\n                          // (This can be expanded if you want to preview the pedestrian route immediately upon selection)\n                        }}\n                    >\n                      <i className={`fas fa-${item.icon} transport-btn-icon`}></i>\n                      <span className=\"transport-btn-label\">{item.label}</span>\n                    </button>\n                ))}\n              </div>\n            </section>\n\n            <section className=\"time-section\">\n              <h3 className=\"section-title\">여행 시간 설정</h3>\n              <div className=\"time-range-container\">\n                <input\n                    type=\"range\"\n                    min=\"20\"\n                    max=\"720\"\n                    value={time}\n                    onChange={(e) => setTime(parseInt(e.target.value))}\n                    className=\"time-range-slider\"\n                    step=\"10\"\n                />\n                <div className=\"time-range-labels\">\n                  <span className=\"time-range-label\">20분</span>\n                  <span className=\"time-range-label\">\n                  {Math.floor(time / 60)}시간 {time % 60}분\n                </span>\n                  <span className=\"time-range-label\">12시간</span>\n                </div>\n              </div>\n            </section>\n\n            <div className=\"map-container\">\n              <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\n            </div>\n\n            <button\n              className=\"start-btn\"\n              onClick={async () => {\n                if (\n                  !markerRef.current ||\n                  !mapInstanceRef.current ||\n                  !outerCircleRef.current ||\n                  !innerCircleRef.current\n                ) {\n                  alert('지도를 초기화하거나 이동수단/시간을 선택해주세요.');\n                  return;\n                }\n                // Get center and radii\n                const center = outerCircleRef.current.getCenter();\n                const outerRadius = outerCircleRef.current.getRadius(); // in meters\n                const innerRadius = innerCircleRef.current.getRadius();\n\n                const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n                // Helper for random point generation and building verification\n                async function getRandomBuildingPoint(maxTries = 10) {\n                  for (let attempt = 0; attempt < maxTries; attempt++) {\n                    // Generate random angle and distance between innerRadius and outerRadius\n                    const theta = Math.random() * 2 * Math.PI;\n                    const r = innerRadius + (outerRadius - innerRadius) * Math.sqrt(Math.random());\n                    // Convert meters to degrees\n                    const latConv = 111320;\n                    const lngConv = 111320 * Math.cos((center.lat() * Math.PI) / 180);\n                    const dLat = (r * Math.cos(theta)) / latConv;\n                    const dLng = (r * Math.sin(theta)) / lngConv;\n                    const lat = center.lat() + dLat;\n                    const lng = center.lng() + dLng;\n                    // Call Tmap reverse geocoding API to check for building\n                    const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${lat}&lon=${lng}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n                    try {\n                      const resp = await fetch(url);\n                      if (resp.ok) {\n                        const data = await resp.json();\n                        // buildingName present and non-empty means it's a building\n                        if (data && data.addressInfo && data.addressInfo.buildingName && data.addressInfo.buildingName.trim() !== '') {\n                          return { lat, lng, addressInfo: data.addressInfo };\n                        }\n                      }\n                    } catch (e) {\n                      // ignore and retry\n                    }\n                  }\n                  // fallback: just use a random point (could not find a building)\n                  // (could return null to abort, but fallback to random point for now)\n                  // Generate one last random point\n                  const theta = Math.random() * 2 * Math.PI;\n                  const r = innerRadius + (outerRadius - innerRadius) * Math.sqrt(Math.random());\n                  const latConv = 111320;\n                  const lngConv = 111320 * Math.cos((center.lat() * Math.PI) / 180);\n                  const dLat = (r * Math.cos(theta)) / latConv;\n                  const dLng = (r * Math.sin(theta)) / lngConv;\n                  const lat = center.lat() + dLat;\n                  const lng = center.lng() + dLng;\n                  return { lat, lng, addressInfo: null };\n                }\n\n                // Remove previous random markers if exist\n                if (window._randomTravelMarkerA) {\n                  window._randomTravelMarkerA.setMap(null);\n                }\n                if (window._randomTravelMarkerB) {\n                  window._randomTravelMarkerB.setMap(null);\n                }\n                // Marker A: start point\n                window._randomTravelMarkerA = new window.Tmapv2.Marker({\n                  position: center,\n                  map: mapInstanceRef.current,\n                  label: 'A',\n                });\n\n                // Generate and verify random point (must be a building)\n                const randomPoint = await getRandomBuildingPoint(10);\n                let lat = randomPoint.lat;\n                let lng = randomPoint.lng;\n\n                window._randomTravelMarkerB = new window.Tmapv2.Marker({\n                  position: new window.Tmapv2.LatLng(lat, lng),\n                  map: mapInstanceRef.current,\n                  label: '',\n                });\n\n                // Center map to random point\n                mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(lat, lng));\n\n                // Determine route type based on selected transport mode\n                let routeType = 'walking'; // default fallback\n                if (selectedTransports.includes('walking')) {\n                  routeType = 'walking';\n                } else if (selectedTransports.includes('car')) {\n                  routeType = 'car';\n                } else if (selectedTransports.includes('bus')) {\n                  routeType = 'bus';\n                } else if (selectedTransports.includes('subway')) {\n                  routeType = 'subway';\n                }\n\n                // Remove previous route line if exists\n                if (routeLineRef.current) {\n                  routeLineRef.current.setMap(null);\n                  routeLineRef.current = null;\n                }\n\n                const startX = center.lng();\n                const startY = center.lat();\n                let endX = lng;\n                let endY = lat;\n\n                // For walking, snap to road (도로 위) using reverse geocoding API for better reliability\n                let snappedLat = lat;\n                let snappedLng = lng;\n                try {\n                  if (routeType === 'walking' || routeType === 'bus' || routeType === 'subway') {\n                    const snapUrl = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${lat}&lon=${lng}&coordType=WGS84GEO&addressType=R&appKey=${appKey}`;\n                    const snapResp = await fetch(snapUrl);\n                    if (snapResp.ok) {\n                      const snapData = await snapResp.json();\n                      if (snapData && snapData.coordinateInfo && snapData.coordinateInfo.lat && snapData.coordinateInfo.lon) {\n                        snappedLat = parseFloat(snapData.coordinateInfo.lat);\n                        snappedLng = parseFloat(snapData.coordinateInfo.lon);\n                        window._randomTravelMarkerB.setPosition(new window.Tmapv2.LatLng(snappedLat, snappedLng));\n                        mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(snappedLat, snappedLng));\n                        endX = snappedLng;\n                        endY = snappedLat;\n                      } else {\n                        endX = lng;\n                        endY = lat;\n                      }\n                    } else {\n                      endX = lng;\n                      endY = lat;\n                    }\n                  }\n                } catch (err) {\n                  endX = lng;\n                  endY = lat;\n                }\n\n                // Coordinate validation\n                const coordsValid =\n                  [startX, startY, endX, endY].every(\n                    v => typeof v === 'number' && !isNaN(v) && isFinite(v)\n                  );\n                if (!coordsValid) {\n                  alert('좌표 값이 올바르지 않습니다.');\n                  return;\n                }\n\n                // Call pedestrian-specific API for walking, otherwise use general route API\n                if (routeType === 'walking') {\n                  // Tmap Pedestrian Route API (POST)\n                  const url = `https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&appKey=${appKey}`;\n                  const body = {\n                    startX: startX.toString(),\n                    startY: startY.toString(),\n                    endX: endX.toString(),\n                    endY: endY.toString(),\n                    reqCoordType: \"WGS84GEO\",\n                    resCoordType: \"WGS84GEO\"\n                  };\n                  fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(body)\n                  })\n                    .then(response => {\n                      if (!response.ok) {\n                        throw new Error('API 요청에 실패했습니다.');\n                      }\n                      return response.json();\n                    })\n                    .then(data => {\n                      if (data.features && data.features.length > 0) {\n                        let drawInfoArr = [];\n                        data.features.forEach(function(feature) {\n                          if (feature.geometry && feature.geometry.type === \"LineString\") {\n                            feature.geometry.coordinates.forEach(function(coord) {\n                              drawInfoArr.push(new window.Tmapv2.LatLng(coord[1], coord[0]));\n                            });\n                          }\n                        });\n                        if (drawInfoArr.length > 0) {\n                          routeLineRef.current = new window.Tmapv2.Polyline({\n                            path: drawInfoArr,\n                            strokeColor: '#FF0000',\n                            strokeWeight: 5,\n                            map: mapInstanceRef.current,\n                          });\n                        }\n                      } else {\n                        alert('경로를 찾을 수 없습니다.');\n                      }\n                    })\n                    .catch(error => {\n                      console.error('경로 요청 중 오류 발생:', error);\n                      alert('경로 요청에 실패했습니다.');\n                    });\n                } else {\n                  // Use general route API for car, bus, subway\n                  let searchOption = '0';\n                  if (routeType === 'bus' || routeType === 'subway') {\n                    searchOption = '2';\n                  }\n                  const resCoordType = 'WGS84GEO';\n                  const url = `https://apis.openapi.sk.com/tmap/routes?version=1&startX=${startX}&startY=${startY}&endX=${endX}&endY=${endY}&reqCoordType=WGS84GEO&resCoordType=${resCoordType}&searchOption=${searchOption}&appKey=${appKey}`;\n                  fetch(url)\n                    .then(response => {\n                      if (!response.ok) {\n                        throw new Error('API 요청에 실패했습니다.');\n                      }\n                      return response.json();\n                    })\n                    .then(data => {\n                      if (data.features && data.features.length > 0) {\n                        let coords = [];\n                        data.features.forEach(feature => {\n                          if (feature.geometry && feature.geometry.type === 'LineString') {\n                            feature.geometry.coordinates.forEach(coord => {\n                              coords.push(new window.Tmapv2.LatLng(coord[1], coord[0]));\n                            });\n                          }\n                        });\n                        if (coords.length > 0) {\n                          routeLineRef.current = new window.Tmapv2.Polyline({\n                            path: coords,\n                            strokeColor: '#FF0000',\n                            strokeWeight: 5,\n                            map: mapInstanceRef.current,\n                          });\n                        }\n                      } else {\n                        alert('경로를 찾을 수 없습니다.');\n                      }\n                    })\n                    .catch(error => {\n                      console.error('경로 요청 중 오류 발생:', error);\n                      alert('경로 요청에 실패했습니다.');\n                    });\n                }\n              }}\n            >\n              <i className=\"fas fa-random start-btn-icon\"></i>\n              랜덤 여행 시작하기\n            </button>\n          </main>\n        </div>\n      </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}