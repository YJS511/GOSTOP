{"ast":null,"code":"import'./App.css';import{useState,useEffect,useRef,useCallback}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedTransports,setSelectedTransports]=useState([]);const[time,setTime]=useState(20);const[address,setAddress]=useState('');const mapRef=useRef(null);const markerRef=useRef(null);const mapInstanceRef=useRef(null);const outerCircleRef=useRef(null);const innerCircleRef=useRef(null);const ringPolygonRef=useRef(null);const toggleTransport=type=>{setSelectedTransports(prev=>{// Prevent selecting bus or subway if car is already selected\nif((type==='bus'||type==='subway')&&prev.includes('car')&&!prev.includes(type)){return prev;}// Prevent selecting car if bus or subway is already selected\nif(type==='car'&&(prev.includes('bus')||prev.includes('subway'))&&!prev.includes('car')){return prev;}// 2. If selecting 'bus' or 'subway', ensure 'walking' is also selected\nif(type==='bus'||type==='subway'){if(prev.includes(type)){// Deselecting bus/subway\nreturn prev.filter(t=>t!==type);}else{// Selecting bus/subway\nlet newTransports=[...prev,type];if(!prev.includes('walking')){newTransports.push('walking');}// Remove duplicates\nreturn Array.from(new Set(newTransports));}}// 3. If deselecting walking, also remove bus and subway if present\nif(type==='walking'){if(prev.includes('walking')){// Deselect walking, also remove bus and subway\nreturn prev.filter(t=>t!=='walking'&&t!=='bus'&&t!=='subway');}else{// Selecting walking\nreturn[...prev,'walking'];}}// Default toggle for other types (including 'car')\nreturn prev.includes(type)?prev.filter(t=>t!==type):[...prev,type];});};const getCurrentLocation=useCallback(()=>{if(navigator.geolocation){navigator.geolocation.getCurrentPosition(position=>{const latitude=position.coords.latitude;const longitude=position.coords.longitude;if(latitude!==undefined&&longitude!==undefined){const appKey='US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';const url=`https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${latitude}&lon=${longitude}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;fetch(url).then(response=>response.json()).then(data=>{if(data&&data.addressInfo){const{legalDong,roadName,buildingName}=data.addressInfo;const simplifiedAddress=`${legalDong} ${roadName}${buildingName?' '+buildingName:''}`;setAddress(simplifiedAddress);}else{setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);}if(window.Tmapv2&&mapInstanceRef.current){// Remove previous marker if exists\nif(markerRef.current){markerRef.current.setMap(null);}markerRef.current=new window.Tmapv2.Marker({position:new window.Tmapv2.LatLng(latitude,longitude),map:mapInstanceRef.current});mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(latitude,longitude));}}).catch(error=>{console.error(error);alert('주소 변환에 실패했습니다.');setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);});}},()=>{alert('위치를 가져오는 데 실패했습니다.');});}else{alert('이 브라우저는 위치를 지원하지 않습니다.');}},[]);useEffect(()=>{getCurrentLocation();if(window.Tmapv2&&mapRef.current){mapInstanceRef.current=new window.Tmapv2.Map(mapRef.current,{center:new window.Tmapv2.LatLng(37.49241689559544,127.03171389453507),width:\"100%\",height:\"100%\",zoom:15,// further zoomed in\nzoomControl:false,scrollwheel:true});}},[getCurrentLocation]);useEffect(()=>{if(!markerRef.current||!mapInstanceRef.current){return;}// Remove previous circles and polygon if exist\nif(outerCircleRef.current){outerCircleRef.current.setMap(null);outerCircleRef.current=null;}if(innerCircleRef.current){innerCircleRef.current.setMap(null);innerCircleRef.current=null;}if(ringPolygonRef.current){ringPolygonRef.current.setMap(null);ringPolygonRef.current=null;}if(selectedTransports.length===0){return;}const position=markerRef.current.getPosition();const latitude=position.lat();const longitude=position.lng();// Average speeds in meters per hour\nconst speedTable={car:60000,bus:40000,subway:50000,walking:5000};// Reduction factors for each transport mode\nconst reductionTable={car:0.7,// 30% reduction\nbus:0.6,// 40% reduction\nsubway:0.5,// 50% reduction\nwalking:0.4// 60% reduction\n};const transports=selectedTransports;const adjustedSpeeds=transports.map(t=>{return speedTable[t]||0;});const totalSpeed=adjustedSpeeds.reduce((acc,s)=>acc+s,0);const avgSpeedMph=totalSpeed/transports.length;const avgSpeedMpm=avgSpeedMph/60;// meters per minute\nlet outerRadius=avgSpeedMpm*time;// meters\n// Apply reduction factors based on selected transport modes\n// Use the most restrictive (minimum) reduction factor among selected transports\nif(transports.length>0){const reductions=transports.map(t=>reductionTable[t]||1);const minReduction=Math.min(...reductions);outerRadius=outerRadius*minReduction;}const innerRadius=outerRadius*0.72;// Draw outer and inner circles with no fill (transparent)\nouterCircleRef.current=new window.Tmapv2.Circle({center:new window.Tmapv2.LatLng(latitude,longitude),radius:outerRadius,strokeWeight:2,strokeColor:\"#3399ff\",strokeOpacity:0.7,fillColor:\"#3399ff\",fillOpacity:0,map:mapInstanceRef.current});innerCircleRef.current=new window.Tmapv2.Circle({center:new window.Tmapv2.LatLng(latitude,longitude),radius:innerRadius,strokeWeight:2,strokeColor:\"#3399ff\",strokeOpacity:0.7,fillColor:\"#3399ff\",fillOpacity:0,map:mapInstanceRef.current});// Create polygon ring (donut shape) between outerRadius and innerRadius\n// Use many small points for smooth ring\nconst pointsCount=60;// number of points for smooth circle\n// Helper function to compute lat/lng offset by meters\nconst metersToLatLng=(lat,lng,dx,dy)=>{// dx: east-west offset in meters\n// dy: north-south offset in meters\nconst latConv=111320;const lngConv=111320*Math.cos(lat*Math.PI/180);const newLat=lat+dy/latConv;const newLng=lng+dx/lngConv;return new window.Tmapv2.LatLng(newLat,newLng);};const outerPoints=[];const innerPoints=[];for(let i=0;i<=pointsCount;i++){const angle=2*Math.PI*i/pointsCount;// Outer circle point (x,y)\nconst ox=outerRadius*Math.cos(angle);const oy=outerRadius*Math.sin(angle);outerPoints.push(metersToLatLng(latitude,longitude,ox,oy));}for(let i=pointsCount;i>=0;i--){const angle=2*Math.PI*i/pointsCount;// Inner circle point (x,y)\nconst ix=innerRadius*Math.cos(angle);const iy=innerRadius*Math.sin(angle);innerPoints.push(metersToLatLng(latitude,longitude,ix,iy));}const ringPath=outerPoints.concat(innerPoints);ringPolygonRef.current=new window.Tmapv2.Polygon({paths:ringPath,strokeWeight:2,strokeColor:\"#3399ff\",strokeOpacity:0.7,fillColor:\"#3399ff\",fillOpacity:0.2,map:mapInstanceRef.current});},[selectedTransports,time]);return/*#__PURE__*/_jsx(\"div\",{className:\"app-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"app-header\",children:/*#__PURE__*/_jsx(\"div\",{className:\"header-inner\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"header-logo\",children:\"GOSTOP\"})})}),/*#__PURE__*/_jsxs(\"main\",{className:\"app-main\",children:[/*#__PURE__*/_jsxs(\"section\",{className:\"location-section\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"section-title\",children:\"\\uD604\\uC7AC \\uC704\\uCE58\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"location-input-wrapper\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uC704\\uCE58\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",className:\"location-input\",value:address,onChange:e=>setAddress(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"location-btn\",onClick:getCurrentLocation,children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-location-crosshairs location-btn-icon\"})})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"transport-section\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"section-title\",children:\"\\uC774\\uB3D9 \\uC218\\uB2E8 \\uC120\\uD0DD\"}),/*#__PURE__*/_jsx(\"div\",{className:\"transport-grid\",children:[{icon:'car',label:'자동차'},{icon:'bus',label:'버스'},{icon:'subway',label:'지하철'},{icon:'walking',label:'도보'}].map(item=>/*#__PURE__*/_jsxs(\"button\",{className:`transport-btn ${selectedTransports.includes(item.icon)?'transport-btn-selected':'transport-btn-default'}`,onClick:()=>toggleTransport(item.icon),children:[/*#__PURE__*/_jsx(\"i\",{className:`fas fa-${item.icon} transport-btn-icon`}),/*#__PURE__*/_jsx(\"span\",{className:\"transport-btn-label\",children:item.label})]},item.icon))})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"time-section\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"section-title\",children:\"\\uC5EC\\uD589 \\uC2DC\\uAC04 \\uC124\\uC815\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"time-range-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"20\",max:\"720\",value:time,onChange:e=>setTime(parseInt(e.target.value)),className:\"time-range-slider\",step:\"10\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"time-range-labels\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"time-range-label\",children:\"20\\uBD84\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"time-range-label\",children:[Math.floor(time/60),\"\\uC2DC\\uAC04 \",time%60,\"\\uBD84\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"time-range-label\",children:\"12\\uC2DC\\uAC04\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"map-container\",children:/*#__PURE__*/_jsx(\"div\",{ref:mapRef,style:{width:'100%',height:'100%'}})}),/*#__PURE__*/_jsxs(\"button\",{className:\"start-btn\",onClick:()=>{if(!markerRef.current||!mapInstanceRef.current||!outerCircleRef.current||!innerCircleRef.current){alert('지도를 초기화하거나 이동수단/시간을 선택해주세요.');return;}// Get center and radii\nconst center=outerCircleRef.current.getCenter();const outerRadius=outerCircleRef.current.getRadius();// in meters\nconst innerRadius=innerCircleRef.current.getRadius();// Generate random angle and distance between innerRadius and outerRadius\nconst theta=Math.random()*2*Math.PI;const r=innerRadius+(outerRadius-innerRadius)*Math.sqrt(Math.random());// Convert meters to degrees\n// 1 deg latitude ~= 111,320 m, 1 deg longitude ~= 111,320 * cos(lat)\nconst latConv=111320;const lngConv=111320*Math.cos(center.lat()*Math.PI/180);const dLat=r*Math.cos(theta)/latConv;const dLng=r*Math.sin(theta)/lngConv;const lat=center.lat()+dLat;const lng=center.lng()+dLng;// Remove previous random markers if exist\nif(window._randomTravelMarkerA){window._randomTravelMarkerA.setMap(null);}if(window._randomTravelMarkerB){window._randomTravelMarkerB.setMap(null);}// Marker A: start point\nwindow._randomTravelMarkerA=new window.Tmapv2.Marker({position:center,map:mapInstanceRef.current,label:'A'});// Marker B: random destination (no label)\nwindow._randomTravelMarkerB=new window.Tmapv2.Marker({position:new window.Tmapv2.LatLng(lat,lng),map:mapInstanceRef.current,label:''});// Center map to random point\nmapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(lat,lng));},children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-random start-btn-icon\"}),\"\\uB79C\\uB364 \\uC5EC\\uD589 \\uC2DC\\uC791\\uD558\\uAE30\"]})]})]})});}export default App;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","jsx","_jsx","jsxs","_jsxs","App","selectedTransports","setSelectedTransports","time","setTime","address","setAddress","mapRef","markerRef","mapInstanceRef","outerCircleRef","innerCircleRef","ringPolygonRef","toggleTransport","type","prev","includes","filter","t","newTransports","push","Array","from","Set","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","undefined","appKey","url","fetch","then","response","json","data","addressInfo","legalDong","roadName","buildingName","simplifiedAddress","toFixed","window","Tmapv2","current","setMap","Marker","LatLng","map","setCenter","catch","error","console","alert","Map","center","width","height","zoom","zoomControl","scrollwheel","length","getPosition","lat","lng","speedTable","car","bus","subway","walking","reductionTable","transports","adjustedSpeeds","totalSpeed","reduce","acc","s","avgSpeedMph","avgSpeedMpm","outerRadius","reductions","minReduction","Math","min","innerRadius","Circle","radius","strokeWeight","strokeColor","strokeOpacity","fillColor","fillOpacity","pointsCount","metersToLatLng","dx","dy","latConv","lngConv","cos","PI","newLat","newLng","outerPoints","innerPoints","i","angle","ox","oy","sin","ix","iy","ringPath","concat","Polygon","paths","className","children","placeholder","value","onChange","e","target","onClick","icon","label","item","max","parseInt","step","floor","ref","style","getCenter","getRadius","theta","random","r","sqrt","dLat","dLng","_randomTravelMarkerA","_randomTravelMarkerB"],"sources":["/Users/yongjisun/Desktop/gostop/src/App.js"],"sourcesContent":["import './App.css'\nimport { useState, useEffect, useRef, useCallback } from 'react'\n\nfunction App() {\n  const [selectedTransports, setSelectedTransports] = useState([])\n  const [time, setTime] = useState(20)\n  const [address, setAddress] = useState('')\n\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const outerCircleRef = useRef(null);\n  const innerCircleRef = useRef(null);\n  const ringPolygonRef = useRef(null);\n\n  const toggleTransport = (type) => {\n    setSelectedTransports((prev) => {\n      // Prevent selecting bus or subway if car is already selected\n      if ((type === 'bus' || type === 'subway') && prev.includes('car') && !prev.includes(type)) {\n        return prev;\n      }\n      // Prevent selecting car if bus or subway is already selected\n      if (type === 'car' && (prev.includes('bus') || prev.includes('subway')) && !prev.includes('car')) {\n        return prev;\n      }\n      // 2. If selecting 'bus' or 'subway', ensure 'walking' is also selected\n      if ((type === 'bus' || type === 'subway')) {\n        if (prev.includes(type)) {\n          // Deselecting bus/subway\n          return prev.filter((t) => t !== type);\n        } else {\n          // Selecting bus/subway\n          let newTransports = [...prev, type];\n          if (!prev.includes('walking')) {\n            newTransports.push('walking');\n          }\n          // Remove duplicates\n          return Array.from(new Set(newTransports));\n        }\n      }\n      // 3. If deselecting walking, also remove bus and subway if present\n      if (type === 'walking') {\n        if (prev.includes('walking')) {\n          // Deselect walking, also remove bus and subway\n          return prev.filter((t) => t !== 'walking' && t !== 'bus' && t !== 'subway');\n        } else {\n          // Selecting walking\n          return [...prev, 'walking'];\n        }\n      }\n      // Default toggle for other types (including 'car')\n      return prev.includes(type) ? prev.filter((t) => t !== type) : [...prev, type];\n    });\n  }\n\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n\n          if (latitude !== undefined && longitude !== undefined) {\n            const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n            const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${latitude}&lon=${longitude}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n\n            fetch(url)\n              .then(response => response.json())\n              .then(data => {\n                if (data && data.addressInfo) {\n                  const { legalDong, roadName, buildingName } = data.addressInfo;\n                  const simplifiedAddress = `${legalDong} ${roadName}${buildingName ? ' ' + buildingName : ''}`;\n                  setAddress(simplifiedAddress);\n                } else {\n                  setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n                }\n                if (window.Tmapv2 && mapInstanceRef.current) {\n                  // Remove previous marker if exists\n                  if (markerRef.current) {\n                    markerRef.current.setMap(null);\n                  }\n                  markerRef.current = new window.Tmapv2.Marker({\n                    position: new window.Tmapv2.LatLng(latitude, longitude),\n                    map: mapInstanceRef.current,\n                  });\n                  mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(latitude, longitude));\n                }\n              })\n              .catch((error) => {\n                console.error(error);\n                alert('주소 변환에 실패했습니다.');\n                setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n              });\n          }\n        },\n        () => {\n          alert('위치를 가져오는 데 실패했습니다.');\n        }\n      );\n    } else {\n      alert('이 브라우저는 위치를 지원하지 않습니다.');\n    }\n  }, [])\n\n  useEffect(() => {\n    getCurrentLocation()\n    if (window.Tmapv2 && mapRef.current) {\n      mapInstanceRef.current = new window.Tmapv2.Map(mapRef.current, {\n        center: new window.Tmapv2.LatLng(37.49241689559544, 127.03171389453507),\n        width: \"100%\",\n        height: \"100%\",\n        zoom: 15, // further zoomed in\n        zoomControl: false,\n        scrollwheel: true,\n      });\n    }\n  }, [getCurrentLocation])\n\n  useEffect(() => {\n    if (!markerRef.current || !mapInstanceRef.current) {\n      return;\n    }\n    // Remove previous circles and polygon if exist\n    if (outerCircleRef.current) {\n      outerCircleRef.current.setMap(null);\n      outerCircleRef.current = null;\n    }\n    if (innerCircleRef.current) {\n      innerCircleRef.current.setMap(null);\n      innerCircleRef.current = null;\n    }\n    if (ringPolygonRef.current) {\n      ringPolygonRef.current.setMap(null);\n      ringPolygonRef.current = null;\n    }\n    if (selectedTransports.length === 0) {\n      return;\n    }\n    const position = markerRef.current.getPosition();\n    const latitude = position.lat();\n    const longitude = position.lng();\n\n    // Average speeds in meters per hour\n    const speedTable = {\n      car: 60000,\n      bus: 40000,\n      subway: 50000,\n      walking: 5000,\n    };\n    // Reduction factors for each transport mode\n    const reductionTable = {\n      car: 0.7,      // 30% reduction\n      bus: 0.6,      // 40% reduction\n      subway: 0.5,   // 50% reduction\n      walking: 0.4,  // 60% reduction\n    };\n    const transports = selectedTransports;\n    const adjustedSpeeds = transports.map((t) => {\n      return speedTable[t] || 0;\n    });\n    const totalSpeed = adjustedSpeeds.reduce((acc, s) => acc + s, 0);\n    const avgSpeedMph = totalSpeed / transports.length;\n    const avgSpeedMpm = avgSpeedMph / 60; // meters per minute\n    let outerRadius = avgSpeedMpm * time; // meters\n\n    // Apply reduction factors based on selected transport modes\n    // Use the most restrictive (minimum) reduction factor among selected transports\n    if (transports.length > 0) {\n      const reductions = transports.map((t) => reductionTable[t] || 1);\n      const minReduction = Math.min(...reductions);\n      outerRadius = outerRadius * minReduction;\n    }\n\n    const innerRadius = outerRadius * 0.72;\n\n    // Draw outer and inner circles with no fill (transparent)\n    outerCircleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: outerRadius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0,\n      map: mapInstanceRef.current,\n    });\n\n    innerCircleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: innerRadius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0,\n      map: mapInstanceRef.current,\n    });\n\n    // Create polygon ring (donut shape) between outerRadius and innerRadius\n    // Use many small points for smooth ring\n    const pointsCount = 60; // number of points for smooth circle\n\n    // Helper function to compute lat/lng offset by meters\n    const metersToLatLng = (lat, lng, dx, dy) => {\n      // dx: east-west offset in meters\n      // dy: north-south offset in meters\n      const latConv = 111320;\n      const lngConv = 111320 * Math.cos((lat * Math.PI) / 180);\n      const newLat = lat + dy / latConv;\n      const newLng = lng + dx / lngConv;\n      return new window.Tmapv2.LatLng(newLat, newLng);\n    };\n\n    const outerPoints = [];\n    const innerPoints = [];\n    for (let i = 0; i <= pointsCount; i++) {\n      const angle = (2 * Math.PI * i) / pointsCount;\n      // Outer circle point (x,y)\n      const ox = outerRadius * Math.cos(angle);\n      const oy = outerRadius * Math.sin(angle);\n      outerPoints.push(metersToLatLng(latitude, longitude, ox, oy));\n    }\n    for (let i = pointsCount; i >= 0; i--) {\n      const angle = (2 * Math.PI * i) / pointsCount;\n      // Inner circle point (x,y)\n      const ix = innerRadius * Math.cos(angle);\n      const iy = innerRadius * Math.sin(angle);\n      innerPoints.push(metersToLatLng(latitude, longitude, ix, iy));\n    }\n\n    const ringPath = outerPoints.concat(innerPoints);\n\n    ringPolygonRef.current = new window.Tmapv2.Polygon({\n      paths: ringPath,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0.2,\n      map: mapInstanceRef.current,\n    });\n\n  }, [selectedTransports, time])\n\n  return (\n      <div className=\"app-wrapper\">\n        <div className=\"app-container\">\n          <header className=\"app-header\">\n            <div className=\"header-inner\">\n              <h1 className=\"header-logo\">GOSTOP</h1>\n            </div>\n          </header>\n\n          <main className=\"app-main\">\n            <section className=\"location-section\">\n              <h3 className=\"section-title\">현재 위치</h3>\n              <div className=\"location-input-wrapper\">\n                <input\n                    type=\"text\"\n                    placeholder=\"위치를 입력하세요\"\n                    className=\"location-input\"\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                />\n                <button className=\"location-btn\" onClick={getCurrentLocation}>\n                  <i className=\"fas fa-location-crosshairs location-btn-icon\"></i>\n                </button>\n              </div>\n            </section>\n\n            <section className=\"transport-section\">\n              <h3 className=\"section-title\">이동 수단 선택</h3>\n              <div className=\"transport-grid\">\n                {[\n                  { icon: 'car', label: '자동차' },\n                  { icon: 'bus', label: '버스' },\n                  { icon: 'subway', label: '지하철' },\n                  { icon: 'walking', label: '도보' },\n                ].map((item) => (\n                    <button\n                        key={item.icon}\n                        className={`transport-btn ${\n                            selectedTransports.includes(item.icon)\n                                ? 'transport-btn-selected'\n                                : 'transport-btn-default'\n                        }`}\n                        onClick={() => toggleTransport(item.icon)}\n                    >\n                      <i className={`fas fa-${item.icon} transport-btn-icon`}></i>\n                      <span className=\"transport-btn-label\">{item.label}</span>\n                    </button>\n                ))}\n              </div>\n            </section>\n\n            <section className=\"time-section\">\n              <h3 className=\"section-title\">여행 시간 설정</h3>\n              <div className=\"time-range-container\">\n                <input\n                    type=\"range\"\n                    min=\"20\"\n                    max=\"720\"\n                    value={time}\n                    onChange={(e) => setTime(parseInt(e.target.value))}\n                    className=\"time-range-slider\"\n                    step=\"10\"\n                />\n                <div className=\"time-range-labels\">\n                  <span className=\"time-range-label\">20분</span>\n                  <span className=\"time-range-label\">\n                  {Math.floor(time / 60)}시간 {time % 60}분\n                </span>\n                  <span className=\"time-range-label\">12시간</span>\n                </div>\n              </div>\n            </section>\n\n            <div className=\"map-container\">\n              <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\n            </div>\n\n            <button\n              className=\"start-btn\"\n              onClick={() => {\n                if (\n                  !markerRef.current ||\n                  !mapInstanceRef.current ||\n                  !outerCircleRef.current ||\n                  !innerCircleRef.current\n                ) {\n                  alert('지도를 초기화하거나 이동수단/시간을 선택해주세요.');\n                  return;\n                }\n                // Get center and radii\n                const center = outerCircleRef.current.getCenter();\n                const outerRadius = outerCircleRef.current.getRadius(); // in meters\n                const innerRadius = innerCircleRef.current.getRadius();\n\n                // Generate random angle and distance between innerRadius and outerRadius\n                const theta = Math.random() * 2 * Math.PI;\n                const r = innerRadius + (outerRadius - innerRadius) * Math.sqrt(Math.random());\n\n                // Convert meters to degrees\n                // 1 deg latitude ~= 111,320 m, 1 deg longitude ~= 111,320 * cos(lat)\n                const latConv = 111320;\n                const lngConv = 111320 * Math.cos((center.lat() * Math.PI) / 180);\n                const dLat = (r * Math.cos(theta)) / latConv;\n                const dLng = (r * Math.sin(theta)) / lngConv;\n                const lat = center.lat() + dLat;\n                const lng = center.lng() + dLng;\n                // Remove previous random markers if exist\n                if (window._randomTravelMarkerA) {\n                  window._randomTravelMarkerA.setMap(null);\n                }\n                if (window._randomTravelMarkerB) {\n                  window._randomTravelMarkerB.setMap(null);\n                }\n                // Marker A: start point\n                window._randomTravelMarkerA = new window.Tmapv2.Marker({\n                  position: center,\n                  map: mapInstanceRef.current,\n                  label: 'A',\n                });\n                // Marker B: random destination (no label)\n                window._randomTravelMarkerB = new window.Tmapv2.Marker({\n                  position: new window.Tmapv2.LatLng(lat, lng),\n                  map: mapInstanceRef.current,\n                  label: '',\n                });\n                // Center map to random point\n                mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(lat, lng));\n              }}\n            >\n              <i className=\"fas fa-random start-btn-icon\"></i>\n              랜덤 여행 시작하기\n            </button>\n          </main>\n        </div>\n      </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}