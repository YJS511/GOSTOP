{"ast":null,"code":"var _jsxFileName = \"/Users/yongjisun/Desktop/gostop/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedTransports, setSelectedTransports] = useState([]);\n  const [time, setTime] = useState(20);\n  const [address, setAddress] = useState('');\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const circleRef = useRef(null);\n  const toggleTransport = type => {\n    setSelectedTransports(prev => {\n      // Prevent selecting bus or subway if car is already selected\n      if ((type === 'bus' || type === 'subway') && prev.includes('car') && !prev.includes(type)) {\n        return prev;\n      }\n      // Prevent selecting car if bus or subway is already selected\n      if (type === 'car' && (prev.includes('bus') || prev.includes('subway')) && !prev.includes('car')) {\n        return prev;\n      }\n      // 2. If selecting 'bus' or 'subway', ensure 'walking' is also selected\n      if (type === 'bus' || type === 'subway') {\n        if (prev.includes(type)) {\n          // Deselecting bus/subway\n          return prev.filter(t => t !== type);\n        } else {\n          // Selecting bus/subway\n          let newTransports = [...prev, type];\n          if (!prev.includes('walking')) {\n            newTransports.push('walking');\n          }\n          // Remove duplicates\n          return Array.from(new Set(newTransports));\n        }\n      }\n      // 3. If deselecting walking, also remove bus and subway if present\n      if (type === 'walking') {\n        if (prev.includes('walking')) {\n          // Deselect walking, also remove bus and subway\n          return prev.filter(t => t !== 'walking' && t !== 'bus' && t !== 'subway');\n        } else {\n          // Selecting walking\n          return [...prev, 'walking'];\n        }\n      }\n      // Default toggle for other types (including 'car')\n      return prev.includes(type) ? prev.filter(t => t !== type) : [...prev, type];\n    });\n  };\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        if (latitude !== undefined && longitude !== undefined) {\n          const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n          const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${latitude}&lon=${longitude}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n          fetch(url).then(response => response.json()).then(data => {\n            if (data && data.addressInfo) {\n              const {\n                legalDong,\n                roadName,\n                buildingName\n              } = data.addressInfo;\n              const simplifiedAddress = `${legalDong} ${roadName}${buildingName ? ' ' + buildingName : ''}`;\n              setAddress(simplifiedAddress);\n            } else {\n              setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n            }\n            if (window.Tmapv2 && mapInstanceRef.current) {\n              // Remove previous marker if exists\n              if (markerRef.current) {\n                markerRef.current.setMap(null);\n              }\n              markerRef.current = new window.Tmapv2.Marker({\n                position: new window.Tmapv2.LatLng(latitude, longitude),\n                map: mapInstanceRef.current\n              });\n              mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(latitude, longitude));\n            }\n          }).catch(error => {\n            console.error(error);\n            alert('주소 변환에 실패했습니다.');\n            setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n          });\n        }\n      }, () => {\n        alert('위치를 가져오는 데 실패했습니다.');\n      });\n    } else {\n      alert('이 브라우저는 위치를 지원하지 않습니다.');\n    }\n  }, []);\n  useEffect(() => {\n    getCurrentLocation();\n    if (window.Tmapv2 && mapRef.current) {\n      mapInstanceRef.current = new window.Tmapv2.Map(mapRef.current, {\n        center: new window.Tmapv2.LatLng(37.49241689559544, 127.03171389453507),\n        width: \"100%\",\n        height: \"100%\",\n        zoom: 15,\n        // further zoomed in\n        zoomControl: false,\n        scrollwheel: true\n      });\n    }\n  }, [getCurrentLocation]);\n  useEffect(() => {\n    if (!markerRef.current || !mapInstanceRef.current) {\n      return;\n    }\n    // Remove previous circle if exists\n    if (circleRef.current) {\n      circleRef.current.setMap(null);\n      circleRef.current = null;\n    }\n    if (selectedTransports.length === 0) {\n      return;\n    }\n    const position = markerRef.current.getPosition();\n    const latitude = position.lat();\n    const longitude = position.lng();\n\n    // Average speeds in meters per hour\n    const speedTable = {\n      car: 60000,\n      bus: 40000,\n      subway: 50000,\n      walking: 5000\n    };\n    // Reduction factors for each transport mode\n    const reductionTable = {\n      car: 0.7,\n      // 30% reduction\n      bus: 0.6,\n      // 40% reduction\n      subway: 0.5,\n      // 50% reduction\n      walking: 0.4 // 60% reduction\n    };\n    const transports = selectedTransports;\n    const adjustedSpeeds = transports.map(t => {\n      return speedTable[t] || 0;\n    });\n    const totalSpeed = adjustedSpeeds.reduce((acc, s) => acc + s, 0);\n    const avgSpeedMph = totalSpeed / transports.length;\n    const avgSpeedMpm = avgSpeedMph / 60; // meters per minute\n    let radius = avgSpeedMpm * time; // meters\n\n    // Apply reduction factors based on selected transport modes\n    // Use the most restrictive (minimum) reduction factor among selected transports\n    if (transports.length > 0) {\n      const reductions = transports.map(t => reductionTable[t] || 1);\n      const minReduction = Math.min(...reductions);\n      radius = radius * minReduction;\n    }\n    circleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: radius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0.2,\n      map: mapInstanceRef.current\n    });\n  }, [selectedTransports, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-inner\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"header-logo\",\n            children: \"GOSTOP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"app-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"location-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-input-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\uC704\\uCE58\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n              className: \"location-input\",\n              value: address,\n              onChange: e => setAddress(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"location-btn\",\n              onClick: getCurrentLocation,\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-location-crosshairs location-btn-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"transport-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uC774\\uB3D9 \\uC218\\uB2E8 \\uC120\\uD0DD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transport-grid\",\n            children: [{\n              icon: 'car',\n              label: '자동차'\n            }, {\n              icon: 'bus',\n              label: '버스'\n            }, {\n              icon: 'subway',\n              label: '지하철'\n            }, {\n              icon: 'walking',\n              label: '도보'\n            }].map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `transport-btn ${selectedTransports.includes(item.icon) ? 'transport-btn-selected' : 'transport-btn-default'}`,\n              onClick: () => toggleTransport(item.icon),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fas fa-${item.icon} transport-btn-icon`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"transport-btn-label\",\n                children: item.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 23\n              }, this)]\n            }, item.icon, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uC5EC\\uD589 \\uC2DC\\uAC04 \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-range-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"20\",\n              max: \"720\",\n              value: time,\n              onChange: e => setTime(parseInt(e.target.value)),\n              className: \"time-range-slider\",\n              step: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-range-labels\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-range-label\",\n                children: \"20\\uBD84\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-range-label\",\n                children: [Math.floor(time / 60), \"\\uC2DC\\uAC04 \", time % 60, \"\\uBD84\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-range-label\",\n                children: \"12\\uC2DC\\uAC04\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: mapRef,\n            style: {\n              width: '100%',\n              height: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-btn\",\n          onClick: () => {\n            if (!markerRef.current || !mapInstanceRef.current || !circleRef.current) {\n              alert('지도를 초기화하거나 이동수단/시간을 선택해주세요.');\n              return;\n            }\n            // Get center and radius\n            const center = circleRef.current.getCenter();\n            const radius = circleRef.current.getRadius(); // in meters\n            // Generate random angle and distance\n            const theta = Math.random() * 2 * Math.PI;\n            const r = radius * Math.sqrt(Math.random());\n            // Convert meters to degrees\n            // 1 deg latitude ~= 111,320 m, 1 deg longitude ~= 111,320 * cos(lat)\n            const latConv = 111320;\n            const lngConv = 111320 * Math.cos(center.lat() * Math.PI / 180);\n            const dLat = r * Math.cos(theta) / latConv;\n            const dLng = r * Math.sin(theta) / lngConv;\n            const lat = center.lat() + dLat;\n            const lng = center.lng() + dLng;\n            // Remove previous random markers if exist\n            if (window._randomTravelMarkerA) {\n              window._randomTravelMarkerA.setMap(null);\n            }\n            if (window._randomTravelMarkerB) {\n              window._randomTravelMarkerB.setMap(null);\n            }\n            // Marker A: start point\n            window._randomTravelMarkerA = new window.Tmapv2.Marker({\n              position: center,\n              map: mapInstanceRef.current,\n              label: 'A'\n            });\n            // Marker B: random destination (no label)\n            window._randomTravelMarkerB = new window.Tmapv2.Marker({\n              position: new window.Tmapv2.LatLng(lat, lng),\n              map: mapInstanceRef.current,\n              label: ''\n            });\n            // Center map to random point\n            mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(lat, lng));\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-random start-btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this), \"\\uB79C\\uB364 \\uC5EC\\uD589 \\uC2DC\\uC791\\uD558\\uAE30\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"f02U9CTTA0BbO7fLTFhSkTZI22I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","App","_s","selectedTransports","setSelectedTransports","time","setTime","address","setAddress","mapRef","markerRef","mapInstanceRef","circleRef","toggleTransport","type","prev","includes","filter","t","newTransports","push","Array","from","Set","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","undefined","appKey","url","fetch","then","response","json","data","addressInfo","legalDong","roadName","buildingName","simplifiedAddress","toFixed","window","Tmapv2","current","setMap","Marker","LatLng","map","setCenter","catch","error","console","alert","Map","center","width","height","zoom","zoomControl","scrollwheel","length","getPosition","lat","lng","speedTable","car","bus","subway","walking","reductionTable","transports","adjustedSpeeds","totalSpeed","reduce","acc","s","avgSpeedMph","avgSpeedMpm","radius","reductions","minReduction","Math","min","Circle","strokeWeight","strokeColor","strokeOpacity","fillColor","fillOpacity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","icon","label","item","max","parseInt","step","floor","ref","style","getCenter","getRadius","theta","random","PI","r","sqrt","latConv","lngConv","cos","dLat","dLng","sin","_randomTravelMarkerA","_randomTravelMarkerB","_c","$RefreshReg$"],"sources":["/Users/yongjisun/Desktop/gostop/src/App.js"],"sourcesContent":["import './App.css'\nimport { useState, useEffect, useRef, useCallback } from 'react'\n\nfunction App() {\n  const [selectedTransports, setSelectedTransports] = useState([])\n  const [time, setTime] = useState(20)\n  const [address, setAddress] = useState('')\n\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const circleRef = useRef(null);\n\n  const toggleTransport = (type) => {\n    setSelectedTransports((prev) => {\n      // Prevent selecting bus or subway if car is already selected\n      if ((type === 'bus' || type === 'subway') && prev.includes('car') && !prev.includes(type)) {\n        return prev;\n      }\n      // Prevent selecting car if bus or subway is already selected\n      if (type === 'car' && (prev.includes('bus') || prev.includes('subway')) && !prev.includes('car')) {\n        return prev;\n      }\n      // 2. If selecting 'bus' or 'subway', ensure 'walking' is also selected\n      if ((type === 'bus' || type === 'subway')) {\n        if (prev.includes(type)) {\n          // Deselecting bus/subway\n          return prev.filter((t) => t !== type);\n        } else {\n          // Selecting bus/subway\n          let newTransports = [...prev, type];\n          if (!prev.includes('walking')) {\n            newTransports.push('walking');\n          }\n          // Remove duplicates\n          return Array.from(new Set(newTransports));\n        }\n      }\n      // 3. If deselecting walking, also remove bus and subway if present\n      if (type === 'walking') {\n        if (prev.includes('walking')) {\n          // Deselect walking, also remove bus and subway\n          return prev.filter((t) => t !== 'walking' && t !== 'bus' && t !== 'subway');\n        } else {\n          // Selecting walking\n          return [...prev, 'walking'];\n        }\n      }\n      // Default toggle for other types (including 'car')\n      return prev.includes(type) ? prev.filter((t) => t !== type) : [...prev, type];\n    });\n  }\n\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n\n          if (latitude !== undefined && longitude !== undefined) {\n            const appKey = 'US3lRlDB4J7h64o8wkq6kUYZAtYW44e7BGFUBz58';\n            const url = `https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&lat=${latitude}&lon=${longitude}&coordType=WGS84GEO&addressType=A10&appKey=${appKey}`;\n\n            fetch(url)\n              .then(response => response.json())\n              .then(data => {\n                if (data && data.addressInfo) {\n                  const { legalDong, roadName, buildingName } = data.addressInfo;\n                  const simplifiedAddress = `${legalDong} ${roadName}${buildingName ? ' ' + buildingName : ''}`;\n                  setAddress(simplifiedAddress);\n                } else {\n                  setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n                }\n                if (window.Tmapv2 && mapInstanceRef.current) {\n                  // Remove previous marker if exists\n                  if (markerRef.current) {\n                    markerRef.current.setMap(null);\n                  }\n                  markerRef.current = new window.Tmapv2.Marker({\n                    position: new window.Tmapv2.LatLng(latitude, longitude),\n                    map: mapInstanceRef.current,\n                  });\n                  mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(latitude, longitude));\n                }\n              })\n              .catch((error) => {\n                console.error(error);\n                alert('주소 변환에 실패했습니다.');\n                setAddress(`위도: ${latitude.toFixed(5)}, 경도: ${longitude.toFixed(5)}`);\n              });\n          }\n        },\n        () => {\n          alert('위치를 가져오는 데 실패했습니다.');\n        }\n      );\n    } else {\n      alert('이 브라우저는 위치를 지원하지 않습니다.');\n    }\n  }, [])\n\n  useEffect(() => {\n    getCurrentLocation()\n    if (window.Tmapv2 && mapRef.current) {\n      mapInstanceRef.current = new window.Tmapv2.Map(mapRef.current, {\n        center: new window.Tmapv2.LatLng(37.49241689559544, 127.03171389453507),\n        width: \"100%\",\n        height: \"100%\",\n        zoom: 15, // further zoomed in\n        zoomControl: false,\n        scrollwheel: true,\n      });\n    }\n  }, [getCurrentLocation])\n\n  useEffect(() => {\n    if (!markerRef.current || !mapInstanceRef.current) {\n      return;\n    }\n    // Remove previous circle if exists\n    if (circleRef.current) {\n      circleRef.current.setMap(null);\n      circleRef.current = null;\n    }\n    if (selectedTransports.length === 0) {\n      return;\n    }\n    const position = markerRef.current.getPosition();\n    const latitude = position.lat();\n    const longitude = position.lng();\n\n    // Average speeds in meters per hour\n    const speedTable = {\n      car: 60000,\n      bus: 40000,\n      subway: 50000,\n      walking: 5000,\n    };\n    // Reduction factors for each transport mode\n    const reductionTable = {\n      car: 0.7,      // 30% reduction\n      bus: 0.6,      // 40% reduction\n      subway: 0.5,   // 50% reduction\n      walking: 0.4,  // 60% reduction\n    };\n    const transports = selectedTransports;\n    const adjustedSpeeds = transports.map((t) => {\n      return speedTable[t] || 0;\n    });\n    const totalSpeed = adjustedSpeeds.reduce((acc, s) => acc + s, 0);\n    const avgSpeedMph = totalSpeed / transports.length;\n    const avgSpeedMpm = avgSpeedMph / 60; // meters per minute\n    let radius = avgSpeedMpm * time; // meters\n\n    // Apply reduction factors based on selected transport modes\n    // Use the most restrictive (minimum) reduction factor among selected transports\n    if (transports.length > 0) {\n      const reductions = transports.map((t) => reductionTable[t] || 1);\n      const minReduction = Math.min(...reductions);\n      radius = radius * minReduction;\n    }\n\n    circleRef.current = new window.Tmapv2.Circle({\n      center: new window.Tmapv2.LatLng(latitude, longitude),\n      radius: radius,\n      strokeWeight: 2,\n      strokeColor: \"#3399ff\",\n      strokeOpacity: 0.7,\n      fillColor: \"#3399ff\",\n      fillOpacity: 0.2,\n      map: mapInstanceRef.current,\n    });\n  }, [selectedTransports, time])\n\n  return (\n      <div className=\"app-wrapper\">\n        <div className=\"app-container\">\n          <header className=\"app-header\">\n            <div className=\"header-inner\">\n              <h1 className=\"header-logo\">GOSTOP</h1>\n            </div>\n          </header>\n\n          <main className=\"app-main\">\n            <section className=\"location-section\">\n              <h3 className=\"section-title\">현재 위치</h3>\n              <div className=\"location-input-wrapper\">\n                <input\n                    type=\"text\"\n                    placeholder=\"위치를 입력하세요\"\n                    className=\"location-input\"\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                />\n                <button className=\"location-btn\" onClick={getCurrentLocation}>\n                  <i className=\"fas fa-location-crosshairs location-btn-icon\"></i>\n                </button>\n              </div>\n            </section>\n\n            <section className=\"transport-section\">\n              <h3 className=\"section-title\">이동 수단 선택</h3>\n              <div className=\"transport-grid\">\n                {[\n                  { icon: 'car', label: '자동차' },\n                  { icon: 'bus', label: '버스' },\n                  { icon: 'subway', label: '지하철' },\n                  { icon: 'walking', label: '도보' },\n                ].map((item) => (\n                    <button\n                        key={item.icon}\n                        className={`transport-btn ${\n                            selectedTransports.includes(item.icon)\n                                ? 'transport-btn-selected'\n                                : 'transport-btn-default'\n                        }`}\n                        onClick={() => toggleTransport(item.icon)}\n                    >\n                      <i className={`fas fa-${item.icon} transport-btn-icon`}></i>\n                      <span className=\"transport-btn-label\">{item.label}</span>\n                    </button>\n                ))}\n              </div>\n            </section>\n\n            <section className=\"time-section\">\n              <h3 className=\"section-title\">여행 시간 설정</h3>\n              <div className=\"time-range-container\">\n                <input\n                    type=\"range\"\n                    min=\"20\"\n                    max=\"720\"\n                    value={time}\n                    onChange={(e) => setTime(parseInt(e.target.value))}\n                    className=\"time-range-slider\"\n                    step=\"10\"\n                />\n                <div className=\"time-range-labels\">\n                  <span className=\"time-range-label\">20분</span>\n                  <span className=\"time-range-label\">\n                  {Math.floor(time / 60)}시간 {time % 60}분\n                </span>\n                  <span className=\"time-range-label\">12시간</span>\n                </div>\n              </div>\n            </section>\n\n            <div className=\"map-container\">\n              <div ref={mapRef} style={{ width: '100%', height: '100%' }} />\n            </div>\n\n            <button\n              className=\"start-btn\"\n              onClick={() => {\n                if (\n                  !markerRef.current ||\n                  !mapInstanceRef.current ||\n                  !circleRef.current\n                ) {\n                  alert('지도를 초기화하거나 이동수단/시간을 선택해주세요.');\n                  return;\n                }\n                // Get center and radius\n                const center = circleRef.current.getCenter();\n                const radius = circleRef.current.getRadius(); // in meters\n                // Generate random angle and distance\n                const theta = Math.random() * 2 * Math.PI;\n                const r = radius * Math.sqrt(Math.random());\n                // Convert meters to degrees\n                // 1 deg latitude ~= 111,320 m, 1 deg longitude ~= 111,320 * cos(lat)\n                const latConv = 111320;\n                const lngConv = 111320 * Math.cos((center.lat() * Math.PI) / 180);\n                const dLat = (r * Math.cos(theta)) / latConv;\n                const dLng = (r * Math.sin(theta)) / lngConv;\n                const lat = center.lat() + dLat;\n                const lng = center.lng() + dLng;\n                // Remove previous random markers if exist\n                if (window._randomTravelMarkerA) {\n                  window._randomTravelMarkerA.setMap(null);\n                }\n                if (window._randomTravelMarkerB) {\n                  window._randomTravelMarkerB.setMap(null);\n                }\n                // Marker A: start point\n                window._randomTravelMarkerA = new window.Tmapv2.Marker({\n                  position: center,\n                  map: mapInstanceRef.current,\n                  label: 'A',\n                });\n                // Marker B: random destination (no label)\n                window._randomTravelMarkerB = new window.Tmapv2.Marker({\n                  position: new window.Tmapv2.LatLng(lat, lng),\n                  map: mapInstanceRef.current,\n                  label: '',\n                });\n                // Center map to random point\n                mapInstanceRef.current.setCenter(new window.Tmapv2.LatLng(lat, lng));\n              }}\n            >\n              <i className=\"fas fa-random start-btn-icon\"></i>\n              랜덤 여행 시작하기\n            </button>\n          </main>\n        </div>\n      </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}